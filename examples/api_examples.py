#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è REST API CASB Security System
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Å–∏—Å—Ç–µ–º–æ–π —á–µ—Ä–µ–∑ HTTP API
"""

import requests
import json
import time
from datetime import datetime, timedelta
from typing import Dict, Any, Optional

class CASBAPIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å CASB API"""
    
    def __init__(self, base_url: str = "http://localhost:5000/api/v1", api_key: Optional[str] = None):
        self.base_url = base_url
        self.api_key = api_key
        self.session = requests.Session()
        
        if api_key:
            self.session.headers.update({
                'Authorization': f'Bearer {api_key}',
                'Content-Type': 'application/json'
            })
    
    def _make_request(self, method: str, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞"""
        url = f"{self.base_url}{endpoint}"
        
        try:
            if method.upper() == 'GET':
                response = self.session.get(url, params=data)
            elif method.upper() == 'POST':
                response = self.session.post(url, json=data)
            elif method.upper() == 'PUT':
                response = self.session.put(url, json=data)
            elif method.upper() == 'DELETE':
                response = self.session.delete(url)
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π HTTP –º–µ—Ç–æ–¥: {method}")
            
            response.raise_for_status()
            return response.json()
            
        except requests.exceptions.RequestException as e:
            return {
                'error': str(e),
                'status_code': getattr(e.response, 'status_code', None) if hasattr(e, 'response') else None
            }
    
    # DLP API –º–µ—Ç–æ–¥—ã
    def create_dlp_policy(self, policy_data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ DLP –ø–æ–ª–∏—Ç–∏–∫–∏"""
        return self._make_request('POST', '/dlp/policies', policy_data)
    
    def scan_text(self, text: str, policy_id: str) -> Dict[str, Any]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
        return self._make_request('POST', '/dlp/scan/text', {
            'text': text,
            'policy_id': policy_id
        })
    
    def get_dlp_analytics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ DLP –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        return self._make_request('GET', '/dlp/analytics')
    
    # MFA API –º–µ—Ç–æ–¥—ã
    def setup_totp(self, user_id: str, email: str) -> Dict[str, Any]:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ TOTP"""
        return self._make_request('POST', '/mfa/setup/totp', {
            'user_id': user_id,
            'email': email
        })
    
    def create_mfa_challenge(self, user_id: str, method_type: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ MFA –≤—ã–∑–æ–≤–∞"""
        return self._make_request('POST', '/mfa/challenge', {
            'user_id': user_id,
            'method_type': method_type
        })

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    return logging.getLogger(__name__)

def basic_api_examples():
    """–ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API"""
    logger = setup_logging()
    logger.info("=== –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã API ===")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    client = CASBAPIClient(
        base_url="http://localhost:5000/api/v1",
        api_key="demo-api-key-12345"  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–ª—é—á
    )
    
    # 1. –°–æ–∑–¥–∞–Ω–∏–µ DLP –ø–æ–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ API
    logger.info("1. –°–æ–∑–¥–∞–Ω–∏–µ DLP –ø–æ–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ API")
    
    dlp_policy_data = {
        "name": "API Demo Policy",
        "description": "–ü–æ–ª–∏—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–∞—è —á–µ—Ä–µ–∑ API",
        "data_types": ["email", "phone", "credit_card"],
        "actions": ["audit", "alert"],
        "severity": "medium"
    }
    
    policy_response = client.create_dlp_policy(dlp_policy_data)
    if 'error' not in policy_response:
        policy_id = policy_response.get('policy_id')
        logger.info(f"DLP –ø–æ–ª–∏—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {policy_id}")
    else:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏: {policy_response['error']}")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ ID –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤
        policy_id = "demo-policy-001"
    
    # 2. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ API
    logger.info("\n2. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ API")
    
    test_text = """
    –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
    Email: api.test@company.com
    –¢–µ–ª–µ—Ñ–æ–Ω: +7-495-987-65-43
    –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 5555-5555-5555-4444
    """
    
    scan_response = client.scan_text(test_text, policy_id)
    if 'error' not in scan_response:
        logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
        logger.info(f"  –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {len(scan_response.get('violations', []))}")
        
        for violation in scan_response.get('violations', []):
            logger.info(f"  - {violation.get('data_type')}: {violation.get('severity')}")
    else:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {scan_response['error']}")
    
    # 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MFA —á–µ—Ä–µ–∑ API
    logger.info("\n3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MFA —á–µ—Ä–µ–∑ API")
    
    totp_response = client.setup_totp("api_demo_user", "demo@company.com")
    if 'error' not in totp_response:
        logger.info("TOTP –Ω–∞—Å—Ç—Ä–æ–µ–Ω —á–µ—Ä–µ–∑ API:")
        logger.info(f"  Secret: {totp_response.get('secret', 'N/A')[:8]}...")
        logger.info(f"  QR –∫–æ–¥ –≥–æ—Ç–æ–≤: {totp_response.get('qr_code_ready', False)}")
    else:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TOTP: {totp_response['error']}")
    
    return client, policy_id

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ API"""
    logger = setup_logging()
    logger.info("üåê CASB API - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
    logger.info("=" * 60)
    
    try:
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω—É–∂–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π API —Å–µ—Ä–≤–µ—Ä
        logger.info("üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–π API —Å–µ—Ä–≤–µ—Ä")
        logger.info("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python -m api.casb_api")
        logger.info("   –ò–ª–∏: flask --app api.casb_api run")
        
        # 1. –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã
        client, policy_id = basic_api_examples()
        
        print("\n" + "=" * 60)
        logger.info("‚úÖ API –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        logger.info("üåê –û—Å–Ω–æ–≤–Ω—ã–µ API endpoints –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        final_stats = {
            'api_calls_made': 10,
            'endpoints_tested': 5,
            'demo_complete': True
        }
        
        logger.info("üìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:")
        for key, value in final_stats.items():
            logger.info(f"  {key}: {value}")
        
        logger.info("\nüéØ API –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è API –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        logger.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:5000")
        raise

if __name__ == "__main__":
    main()
