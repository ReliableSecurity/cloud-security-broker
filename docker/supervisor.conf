[unix_http_server]
file=/tmp/supervisor.sock
chmod=0700

[supervisord]
logfile=/app/logs/supervisord.log
logfile_maxbytes=50MB
logfile_backups=10
loglevel=info
pidfile=/tmp/supervisord.pid
nodaemon=true
minfds=1024
minprocs=200
user=casb

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock

# CASB главное приложение
[program:casb-app]
command=gunicorn -c gunicorn.conf.py app:app
directory=/app
user=casb
autostart=true
autorestart=true
startsecs=10
startretries=3
stopwaitsecs=600
stdout_logfile=/app/logs/casb-app.log
stderr_logfile=/app/logs/casb-app.log
environment=PYTHONPATH="/app",FLASK_ENV="production",CASB_CONFIG_PATH="/app/config.yaml"

# Планировщик задач для резервного копирования
[program:casb-scheduler]
command=python3 -c "
import time
import subprocess
import schedule

def backup_job():
    subprocess.run(['/app/scripts/backup.sh'], check=False)

def cleanup_job():
    subprocess.run(['/app/scripts/backup.sh', '--cleanup'], check=False)

# Резервное копирование каждый день в 2:00
schedule.every().day.at('02:00').do(backup_job)

# Очистка старых резервных копий каждую неделю
schedule.every().sunday.at('03:00').do(cleanup_job)

while True:
    schedule.run_pending()
    time.sleep(60)
"
directory=/app
user=casb
autostart=true
autorestart=true
startsecs=5
stdout_logfile=/app/logs/scheduler.log
stderr_logfile=/app/logs/scheduler.log

# Nginx веб-сервер
[program:nginx]
command=nginx -g "daemon off;"
autostart=true
autorestart=true
startsecs=5
stdout_logfile=/app/logs/nginx.log
stderr_logfile=/app/logs/nginx.log
user=root

# Мониторинг системных ресурсов
[program:casb-monitor]
command=python3 -c "
import time
import psutil
import json
import os
from datetime import datetime

def collect_metrics():
    metrics = {
        'timestamp': datetime.now().isoformat(),
        'cpu_percent': psutil.cpu_percent(),
        'memory_percent': psutil.virtual_memory().percent,
        'disk_usage': psutil.disk_usage('/app').percent,
        'load_average': os.getloadavg(),
        'process_count': len(psutil.pids())
    }
    
    with open('/app/data/system_metrics.json', 'w') as f:
        json.dump(metrics, f)

while True:
    try:
        collect_metrics()
    except Exception as e:
        print(f'Ошибка сбора метрик: {e}')
    time.sleep(60)
"
directory=/app
user=casb
autostart=true
autorestart=true
startsecs=5
stdout_logfile=/app/logs/monitor.log
stderr_logfile=/app/logs/monitor.log

# Очистка логов
[program:casb-logrotate]
command=python3 -c "
import time
import os
import gzip
import shutil
from datetime import datetime, timedelta

def rotate_logs():
    log_dir = '/app/logs'
    max_size = 100 * 1024 * 1024  # 100MB
    
    for root, dirs, files in os.walk(log_dir):
        for file in files:
            if file.endswith('.log'):
                file_path = os.path.join(root, file)
                if os.path.getsize(file_path) > max_size:
                    # Сжатие и архивирование
                    archive_name = f'{file_path}.{datetime.now().strftime(\"%Y%m%d_%H%M%S\")}.gz'
                    with open(file_path, 'rb') as f_in:
                        with gzip.open(archive_name, 'wb') as f_out:
                            shutil.copyfileobj(f_in, f_out)
                    
                    # Очистка оригинального файла
                    open(file_path, 'w').close()
                    print(f'Лог ротирован: {file} -> {os.path.basename(archive_name)}')

def cleanup_old_logs():
    log_dir = '/app/logs'
    cutoff_date = datetime.now() - timedelta(days=30)
    
    for root, dirs, files in os.walk(log_dir):
        for file in files:
            if file.endswith('.gz'):
                file_path = os.path.join(root, file)
                if datetime.fromtimestamp(os.path.getmtime(file_path)) < cutoff_date:
                    os.remove(file_path)
                    print(f'Удален старый лог: {file}')

while True:
    try:
        rotate_logs()
        cleanup_old_logs()
    except Exception as e:
        print(f'Ошибка ротации логов: {e}')
    time.sleep(3600)  # Каждый час
"
directory=/app
user=casb
autostart=true
autorestart=true
startsecs=5
stdout_logfile=/app/logs/logrotate.log
stderr_logfile=/app/logs/logrotate.log

# Мониторинг безопасности
[program:casb-security-monitor]
command=python3 -c "
import time
import subprocess
import json
import os
from datetime import datetime

def security_check():
    alerts = []
    
    # Проверка подозрительных процессов
    try:
        result = subprocess.run(['ps', 'aux'], capture_output=True, text=True)
        for line in result.stdout.split('\n'):
            if any(suspicious in line.lower() for suspicious in ['nc ', 'netcat', 'reverse_shell']):
                alerts.append({
                    'type': 'suspicious_process',
                    'message': f'Подозрительный процесс: {line.strip()}',
                    'severity': 'high',
                    'timestamp': datetime.now().isoformat()
                })
    except Exception as e:
        print(f'Ошибка проверки процессов: {e}')
    
    # Проверка сетевых соединений
    try:
        result = subprocess.run(['netstat', '-tulpn'], capture_output=True, text=True)
        open_ports = len([line for line in result.stdout.split('\n') if 'LISTEN' in line])
        if open_ports > 20:
            alerts.append({
                'type': 'excessive_open_ports',
                'message': f'Много открытых портов: {open_ports}',
                'severity': 'medium',
                'timestamp': datetime.now().isoformat()
            })
    except Exception as e:
        print(f'Ошибка проверки портов: {e}')
    
    # Сохранение алертов
    if alerts:
        alerts_file = '/app/data/security_alerts.json'
        with open(alerts_file, 'w') as f:
            json.dump(alerts, f, indent=2)
        print(f'Обнаружено {len(alerts)} алертов безопасности')

while True:
    try:
        security_check()
    except Exception as e:
        print(f'Ошибка мониторинга безопасности: {e}')
    time.sleep(300)  # Каждые 5 минут
"
directory=/app
user=casb
autostart=true
autorestart=true
startsecs=5
stdout_logfile=/app/logs/security-monitor.log
stderr_logfile=/app/logs/security-monitor.log

# Группировка программ
[group:casb]
programs=casb-app,casb-scheduler,casb-monitor,casb-logrotate,casb-security-monitor

[group:infrastructure]
programs=nginx
