#!/usr/bin/env python3
"""
–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è DLP (Data Loss Prevention)
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
import json
import tempfile
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from dlp.data_loss_prevention import DLPEngine

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    return logging.getLogger(__name__)

def create_test_files():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    logger = setup_logging()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    test_dir = tempfile.mkdtemp(prefix="dlp_test_")
    logger.info(f"–°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤: {test_dir}")
    
    # –§–∞–π–ª —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    sensitive_data = """
–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏:
1. –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á
   Email: ivanov@company.com
   –¢–µ–ª–µ—Ñ–æ–Ω: +7-495-123-45-67
   –ü–∞—Å–ø–æ—Ä—Ç: 45 03 123456
   –ò–ù–ù: 123456789012
   
2. –ü–µ—Ç—Ä–æ–≤–∞ –ú–∞—Ä–∏—è –°–µ—Ä–≥–µ–µ–≤–Ω–∞
   Email: petrova@company.com
   –¢–µ–ª–µ—Ñ–æ–Ω: +7-916-987-65-43
   –ü–∞—Å–ø–æ—Ä—Ç: 45 03 654321
   –ò–ù–ù: 210987654321
   –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 5555-5555-5555-4444
"""
    
    # –§–∞–π–ª —Å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    commercial_data = """
–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏:
- –í—ã—Ä—É—á–∫–∞ Q3 2024: $2,500,000
- –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –±–∞–∑–∞: 15,000 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –ù–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç: Project Phoenix (—Ä–µ–ª–∏–∑ Q1 2025)
- API –∫–ª—é—á–∏: sk-1234567890abcdef, prod-api-key-xyz789
"""
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    files = {
        'employees.txt': sensitive_data,
        'financial_report.txt': commercial_data
    }
    
    for filename, content in files.items():
        file_path = os.path.join(test_dir, filename)
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
    
    return test_dir, files

def policy_creation_examples():
    """–ü—Ä–∏–º–µ—Ä—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–ª–∏—Ç–∏–∫ DLP"""
    logger = setup_logging()
    logger.info("=== –ü—Ä–∏–º–µ—Ä—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫ DLP ===")
    
    dlp = DLPEngine("dlp_examples.db")
    
    # 1. –ë–∞–∑–æ–≤–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è –ü–î–Ω
    pii_policy = dlp.create_policy(
        name="Personal Data Protection",
        description="–ó–∞—â–∏—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
        data_types=["email", "phone", "passport", "inn"],
        actions=["audit", "encrypt", "notify"]
    )
    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–æ–ª–∏—Ç–∏–∫–∞ –ü–î–Ω: {pii_policy}")
    
    # 2. –ü–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    financial_policy = dlp.create_policy(
        name="Financial Data Security",
        description="–ó–∞—â–∏—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
        data_types=["credit_card", "bank_account", "financial_data"],
        actions=["block", "audit", "alert"]
    )
    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞: {financial_policy}")
    
    # 3. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è ML-–ø–æ–ª–∏—Ç–∏–∫–∞
    ml_policy = dlp.create_advanced_policy(
        name="ML-Enhanced Sensitive Data Detection",
        ml_enabled=True,
        confidence_threshold=0.85,
        real_time_monitoring=True,
        adaptive_learning=True
    )
    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ ML-–ø–æ–ª–∏—Ç–∏–∫–∞: {ml_policy}")
    
    return dlp, [pii_policy, financial_policy, ml_policy]

def scanning_examples(dlp, test_dir, policy_ids):
    """–ü—Ä–∏–º–µ—Ä—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    logger = setup_logging()
    logger.info("=== –ü—Ä–∏–º–µ—Ä—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ===")
    
    # 1. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    test_text = """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: john.doe@company.com
    –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 4111-1111-1111-1111
    API –∫–ª—é—á: sk-1234567890abcdef
    """
    
    scan_result = dlp.scan_text(test_text, policy_ids[0])
    logger.info("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞:")
    logger.info(f"  –ù–∞–π–¥–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: {len(scan_result['violations'])}")
    
    for violation in scan_result['violations']:
        logger.info(f"  - {violation['data_type']}: {violation['matched_data']}")
    
    # 2. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    for filename in os.listdir(test_dir):
        file_path = os.path.join(test_dir, filename)
        
        try:
            file_scan = dlp.scan_file(file_path, policy_ids[0])
            logger.info(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ {filename}:")
            logger.info(f"  –†–∞–∑–º–µ—Ä: {file_scan['file_size']} –±–∞–π—Ç")
            logger.info(f"  –ù–∞—Ä—É—à–µ–Ω–∏–π: {len(file_scan.get('violations', []))}")
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {filename}: {e}")
    
    # 3. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    directory_scan = dlp.scan_directory(test_dir, policy_ids[0])
    logger.info("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
    logger.info(f"  –§–∞–π–ª–æ–≤ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {directory_scan['files_scanned']}")
    logger.info(f"  –í—Å–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: {directory_scan['total_violations']}")
    
    return directory_scan

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ DLP"""
    logger = setup_logging()
    logger.info("üõ°Ô∏è DLP System - –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    logger.info("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        test_dir, test_files = create_test_files()
        logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –≤: {test_dir}")
        
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫
        dlp, policy_ids = policy_creation_examples()
        
        print("\n" + "=" * 60)
        
        # 2. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        scan_results = scanning_examples(dlp, test_dir, policy_ids)
        
        print("\n" + "=" * 60)
        logger.info("‚úÖ DLP –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        final_report = {
            'timestamp': datetime.now().isoformat(),
            'demo_statistics': {
                'policies_created': len(policy_ids),
                'test_files': len(test_files),
                'scan_results': scan_results
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        report_filename = f"dlp_demo_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_filename, 'w', encoding='utf-8') as f:
            json.dump(final_report, f, indent=2, ensure_ascii=False)
        
        logger.info(f"üìÑ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_filename}")
        logger.info("üéØ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ DLP –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        raise
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        cleanup = False  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ True –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        if cleanup:
            try:
                import shutil
                if 'test_dir' in locals():
                    shutil.rmtree(test_dir)
                    logger.info(f"üßπ –¢–µ—Å—Ç–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞: {test_dir}")
                
                if os.path.exists("dlp_examples.db"):
                    os.remove("dlp_examples.db")
                    logger.info("üßπ DLP –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞")
                    
            except Exception as e:
                logger.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

if __name__ == "__main__":
    main()
