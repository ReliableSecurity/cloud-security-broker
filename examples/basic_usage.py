#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CASB Security System
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ DLP –∏ MFA –º–æ–¥—É–ª–µ–π
"""

import sys
import os
import json
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from dlp.data_loss_prevention import DLPEngine
from auth.mfa_auth import MFAAuthenticator

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤"""
    import logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    return logging.getLogger(__name__)

def basic_dlp_example():
    """–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è DLP"""
    logger = setup_logging()
    logger.info("=== –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä DLP ===")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DLP
    dlp = DLPEngine("examples_casb.db")
    
    # 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏
    policy_id = dlp.create_policy(
        name="Basic PII Protection",
        description="–ó–∞—â–∏—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
        data_types=["email", "phone", "ssn"],
        actions=["audit", "block"]
    )
    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–æ–ª–∏—Ç–∏–∫–∞: {policy_id}")
    
    # 2. –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    test_data = """
    –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
    Email: john.doe@company.com
    –¢–µ–ª–µ—Ñ–æ–Ω: +7-999-123-45-67
    –ü–∞—Å–ø–æ—Ä—Ç: 45 03 123456
    –ò–ù–ù: 123456789012
    –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 4111-1111-1111-1111
    """
    
    # 3. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    scan_result = dlp.scan_text(test_data, policy_id)
    logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
    logger.info(f"  –ù–∞–π–¥–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: {len(scan_result['violations'])}")
    
    for violation in scan_result['violations']:
        logger.info(f"  - {violation['data_type']}: {violation['matched_data']}")
    
    # 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏ —Å ML
    advanced_policy = dlp.create_advanced_policy(
        name="ML-Enhanced Detection",
        ml_enabled=True,
        confidence_threshold=0.85,
        real_time_monitoring=True
    )
    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞: {advanced_policy}")
    
    # 5. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏
    dashboard = dlp.create_analytics_dashboard()
    logger.info("–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–Ω–µ–ª—å DLP:")
    logger.info(json.dumps(dashboard, indent=2, ensure_ascii=False))
    
    return dlp, policy_id

def basic_mfa_example():
    """–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MFA"""
    logger = setup_logging()
    logger.info("=== –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä MFA ===")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MFA
    smtp_config = {
        'enabled': False,  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        'smtp_server': 'smtp.gmail.com',
        'smtp_port': 587
    }
    
    mfa = MFAAuthenticator(
        "examples_casb.db",
        smtp_config=smtp_config
    )
    
    user_id = "demo_user_001"
    
    # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ TOTP
    secret, qr_code = mfa.setup_totp(user_id, "demo@company.com")
    logger.info("TOTP –Ω–∞—Å—Ç—Ä–æ–µ–Ω:")
    logger.info(f"  –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á: {secret}")
    logger.info(f"  QR –∫–æ–¥ (–ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤): {qr_code[:50]}...")
    
    # 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SMS (–¥–µ–º–æ —Ä–µ–∂–∏–º)
    sms_method = mfa.setup_sms(user_id, "+7-999-123-45-67")
    logger.info(f"SMS –º–µ—Ç–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {sms_method}")
    
    # 3. –°–æ–∑–¥–∞–Ω–∏–µ MFA –≤—ã–∑–æ–≤–∞
    challenge = mfa.create_challenge(user_id, "totp")
    if challenge:
        logger.info(f"MFA –≤—ã–∑–æ–≤ —Å–æ–∑–¥–∞–Ω: {challenge.challenge_id}")
        logger.info(f"  –¢–∏–ø: {challenge.method_type}")
        logger.info(f"  –ò—Å—Ç–µ–∫–∞–µ—Ç: {challenge.expires_at}")
    
    # 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    adaptive_result = mfa.evaluate_adaptive_authentication(user_id, {
        'ip_address': '192.168.1.100',
        'device_fingerprint': 'desktop_chrome',
        'location': 'office',
        'time_of_day': '14:30',
        'new_device': False,
        'unusual_location': False
    })
    
    logger.info("–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:")
    logger.info(f"  –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {adaptive_result['risk_score']}")
    logger.info(f"  –¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤: {adaptive_result['required_factors']}")
    logger.info(f"  –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–µ—Ç–æ–¥—ã: {adaptive_result['recommended_methods']}")
    
    # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ MFA
    mfa_stats = mfa.get_mfa_statistics(7)  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ MFA:")
    logger.info(f"  –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {mfa_stats['total_attempts']}")
    logger.info(f"  –£—Å–ø–µ—à–Ω—ã—Ö: {mfa_stats['successful_attempts']}")
    logger.info(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {mfa_stats['success_rate']}%")
    
    return mfa, user_id

def advanced_integration_example():
    """–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ DLP –∏ MFA"""
    logger = setup_logging()
    logger.info("=== –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ DLP –∏ MFA ===")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º
    dlp = DLPEngine("examples_casb.db")
    mfa = MFAAuthenticator("examples_casb.db")
    
    user_id = "integration_user_001"
    
    # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ MFA
    logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ MFA...")
    
    # TOTP (–æ—Å–Ω–æ–≤–Ω–æ–π)
    totp_secret, _ = mfa.setup_totp(user_id, "integration@company.com")
    
    # SMS (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π)
    sms_method = mfa.setup_sms(user_id, "+7-999-123-45-67")
    
    # –ë–∏–æ–º–µ—Ç—Ä–∏—è (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π)
    biometric_id = mfa.setup_biometric_authentication(
        user_id, "fingerprint", "demo_fingerprint_template"
    )
    
    logger.info("–ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –º–µ—Ç–æ–¥—ã: TOTP, SMS, –±–∏–æ–º–µ—Ç—Ä–∏—è")
    
    # 2. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π DLP –ø–æ–ª–∏—Ç–∏–∫–∏
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π DLP –ø–æ–ª–∏—Ç–∏–∫–∏...")
    
    advanced_policy = dlp.create_advanced_policy(
        name="Integration Security Policy",
        ml_enabled=True,
        real_time_monitoring=True,
        blockchain_audit=False  # –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –¥–µ–º–æ
    )
    
    # 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    anonymizer_id = dlp.setup_data_anonymization(
        anonymization_type="k_anonymity",
        k_value=5,
        quasi_identifiers=["age", "zipcode", "department"]
    )
    
    logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è: {anonymizer_id}")
    
    # 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Ç–æ–∫–µ–Ω–æ–≤
    vault_id = dlp.create_tokenization_vault(
        vault_name="Demo_PII_Vault",
        encryption_key="demo-encryption-key-123",
        token_format="alphanumeric"
    )
    
    logger.info(f"–°–æ–∑–¥–∞–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–æ–≤: {vault_id}")
    
    # 5. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    monitor_id = dlp.setup_real_time_monitor(
        monitor_name="Critical Data Monitor",
        data_types=["ssn", "credit_card", "passport"],
        alert_threshold=1,
        response_actions=["immediate_alert", "audit"]
    )
    
    logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {monitor_id}")
    
    # 6. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Zero Trust –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    zt_verification = mfa.create_zero_trust_verification(
        user_id, "sensitive_database", {
            'new_device': False,
            'corporate_network': True,
            'managed_device': True,
            'off_hours_access': False
        }
    )
    
    logger.info(f"Zero Trust –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {zt_verification}")
    
    # 7. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    dlp_dashboard = dlp.create_analytics_dashboard()
    mfa_dashboard = mfa.create_mfa_analytics_dashboard("technical")
    
    integration_report = {
        'timestamp': datetime.now().isoformat(),
        'user_id': user_id,
        'dlp_status': dlp_dashboard,
        'mfa_status': mfa_dashboard,
        'security_posture': 'HIGH',
        'compliance_status': 'COMPLIANT'
    }
    
    logger.info("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω")
    return integration_report

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    logger = setup_logging()
    logger.info("üîê CASB Security System - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
    logger.info("=" * 60)
    
    try:
        # 1. –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã
        dlp, policy_id = basic_dlp_example()
        mfa, user_id = basic_mfa_example()
        
        print("\n" + "=" * 60)
        
        # 2. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        integration_result = advanced_integration_example()
        
        print("\n" + "=" * 60)
        logger.info("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        logger.info("üìä –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        logger.info("üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        final_stats = {
            'dlp_policies_created': 2,
            'mfa_methods_configured': 3,
            'security_features_enabled': 10,
            'integration_complete': True
        }
        
        logger.info("üìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        for key, value in final_stats.items():
            logger.info(f"  {key}: {value}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        raise
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        cleanup_demo = False  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ True –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        if cleanup_demo:
            try:
                os.remove("examples_casb.db")
                logger.info("üßπ –î–µ–º–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞")
            except FileNotFoundError:
                pass

if __name__ == "__main__":
    main()
