#!/usr/bin/env python3
"""
–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è MFA (Multi-Factor Authentication)
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –º–Ω–æ–≥–æ—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

import sys
import os
import json
import time
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from auth.mfa_auth import MFAAuthenticator

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    return logging.getLogger(__name__)

def basic_mfa_setup_examples():
    """–ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MFA"""
    logger = setup_logging()
    logger.info("=== –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MFA ===")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MFA —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º SMTP –¥–ª—è –¥–µ–º–æ
    smtp_config = {
        'enabled': False,
        'smtp_server': 'smtp.company.com',
        'smtp_port': 587,
        'username': 'mfa@company.com'
    }
    
    mfa = MFAAuthenticator("mfa_examples.db", smtp_config=smtp_config)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    test_users = [
        {"id": "user_001", "email": "john.doe@company.com", "phone": "+7-495-123-45-67"},
        {"id": "user_002", "email": "jane.smith@company.com", "phone": "+7-916-987-65-43"},
        {"id": "admin_001", "email": "admin@company.com", "phone": "+7-495-555-00-00"}
    ]
    
    # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ TOTP –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.info("1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ TOTP –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    totp_configs = {}
    
    for user in test_users:
        secret, qr_code = mfa.setup_totp(user["id"], user["email"])
        totp_configs[user["id"]] = {
            'secret': secret,
            'qr_code_length': len(qr_code)
        }
        logger.info(f"TOTP –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è {user['id']}: —Å–µ–∫—Ä–µ—Ç {secret[:8]}...")
    
    # 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SMS
    logger.info("\n2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SMS –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    sms_configs = {}
    
    for user in test_users:
        sms_method = mfa.setup_sms(user["id"], user["phone"])
        sms_configs[user["id"]] = sms_method
        logger.info(f"SMS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è {user['id']}: {user['phone']}")
    
    # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è backup –∫–æ–¥–æ–≤
    logger.info("\n3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è backup –∫–æ–¥–æ–≤")
    backup_configs = {}
    
    for user in test_users:
        backup_codes = mfa.generate_backup_codes(user["id"], count=10)
        backup_configs[user["id"]] = len(backup_codes)
        logger.info(f"Backup –∫–æ–¥—ã –¥–ª—è {user['id']}: {len(backup_codes)} –∫–æ–¥–æ–≤")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 2 –∫–æ–¥–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        logger.info(f"  –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–æ–≤: {backup_codes[:2]}")
    
    return mfa, test_users, {
        'totp': totp_configs,
        'sms': sms_configs,
        'backup': backup_configs
    }

def advanced_mfa_methods_examples(mfa, test_users):
    """–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–µ—Ç–æ–¥–æ–≤ MFA"""
    logger = setup_logging()
    logger.info("=== –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–µ—Ç–æ–¥–æ–≤ MFA ===")
    
    user_id = test_users[0]["id"]
    
    # 1. –ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    logger.info("1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    
    biometric_methods = [
        {"type": "fingerprint", "template": "demo_fingerprint_template_001"},
        {"type": "face_recognition", "template": "demo_face_template_001"}
    ]
    
    biometric_configs = {}
    for method in biometric_methods:
        bio_id = mfa.setup_biometric_authentication(
            user_id, method["type"], method["template"]
        )
        biometric_configs[method["type"]] = bio_id
        logger.info(f"–ë–∏–æ–º–µ—Ç—Ä–∏—è {method['type']} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞: {bio_id}")
    
    # 2. –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    logger.info("\n2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    
    behavior_analytics = mfa.setup_behavior_analytics(user_id, {
        "baseline_period": 30,
        "anomaly_threshold": 0.8,
        "learning_enabled": True,
        "context_aware": True
    })
    logger.info(f"–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: {behavior_analytics}")
    
    return {
        'biometric': biometric_configs,
        'behavior_analytics': behavior_analytics
    }

def authentication_flow_examples(mfa, test_users):
    """–ü—Ä–∏–º–µ—Ä—ã –ø–æ—Ç–æ–∫–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    logger = setup_logging()
    logger.info("=== –ü—Ä–∏–º–µ—Ä—ã –ø–æ—Ç–æ–∫–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ===")
    
    user_id = test_users[0]["id"]
    
    # 1. –ü—Ä–æ—Å—Ç–æ–π TOTP –ø–æ—Ç–æ–∫
    logger.info("1. –ü—Ä–æ—Å—Ç–æ–π TOTP –ø–æ—Ç–æ–∫")
    
    totp_challenge = mfa.create_challenge(user_id, "totp")
    if totp_challenge:
        logger.info(f"TOTP –≤—ã–∑–æ–≤ —Å–æ–∑–¥–∞–Ω: {totp_challenge.challenge_id}")
        logger.info(f"  –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑: {totp_challenge.expires_at - datetime.now()}")
    
    # 2. –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    logger.info("\n2. –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π —Å –Ω–∏–∑–∫–∏–º —Ä–∏—Å–∫–æ–º
    low_risk_context = {
        'ip_address': '192.168.1.100',  # –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Å–µ—Ç—å
        'device_fingerprint': 'known_device_001',
        'location': 'office',
        'time_of_day': '10:30',  # –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
        'new_device': False,
        'unusual_location': False
    }
    
    adaptive_low = mfa.evaluate_adaptive_authentication(user_id, low_risk_context)
    logger.info(f"–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ - –¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤: {adaptive_low['required_factors']}")
    logger.info(f"  –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–µ—Ç–æ–¥—ã: {adaptive_low['recommended_methods']}")
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º
    high_risk_context = {
        'ip_address': '185.220.101.5',  # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π IP
        'device_fingerprint': 'unknown_device_002',
        'location': 'foreign_country',
        'time_of_day': '03:15',  # –ù–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
        'new_device': True,
        'unusual_location': True
    }
    
    adaptive_high = mfa.evaluate_adaptive_authentication(user_id, high_risk_context)
    logger.info(f"–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ - –¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤: {adaptive_high['required_factors']}")
    logger.info(f"  –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–µ—Ç–æ–¥—ã: {adaptive_high['recommended_methods']}")
    
    return {
        'totp_challenge': totp_challenge,
        'adaptive_results': {'low_risk': adaptive_low, 'high_risk': adaptive_high}
    }

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ MFA"""
    logger = setup_logging()
    logger.info("üîê MFA System - –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    logger.info("=" * 60)
    
    try:
        # 1. –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ MFA
        basic_setup = basic_mfa_setup_examples()
        mfa, test_users = basic_setup[0], basic_setup[1]
        
        print("\n" + "=" * 60)
        
        # 2. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç–æ–¥—ã
        advanced_methods = advanced_mfa_methods_examples(mfa, test_users)
        
        print("\n" + "=" * 60)
        
        # 3. –ü–æ—Ç–æ–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        auth_flows = authentication_flow_examples(mfa, test_users)
        
        print("\n" + "=" * 60)
        logger.info("‚úÖ MFA –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        logger.info("üîí –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–Ω–æ–≥–æ—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ò—Ç–æ–≥–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        final_stats = {
            'total_users_configured': len(test_users),
            'mfa_methods_configured': 5,
            'security_features_enabled': 10
        }
        
        logger.info("üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ MFA –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:")
        for key, value in final_stats.items():
            logger.info(f"  {key}: {value}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è MFA –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        raise
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        cleanup = False  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ True –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        if cleanup:
            try:
                if os.path.exists("mfa_examples.db"):
                    os.remove("mfa_examples.db")
                    logger.info("üßπ MFA –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞")
                    
            except Exception as e:
                logger.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

if __name__ == "__main__":
    main()
